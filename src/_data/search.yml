# THIS IS MOCK DATA. IT IS NOT USED IN PRODUCTION.
page: 1
pages: 4
per_page: 20
items:
  - excerpt: |-
      s username, if available
      username: current_user.username, # "<strong class="match term0">foo</strong>"

      # the actor's IP address, if available
      ip_address: request.ip # '127.0.0.1
    path: clients/ruby/context#providing-request-context
    section: hosted
    title: Providing Request Context
  - excerpt: |-
      s username, if available
      username: current_user.username, # "<strong class="match term0">foo</strong>"

      # the actor's IP address, if available
      ip_address: request.ip # '127.0.0.1
    path: clients/ruby/context#user-context
    section: hosted
    title: User Context
  - excerpt: |-
      in the extra kwarg in each log like this
      some_logger.warning('<strong class="match term0">foo</strong>', extra={'sample_rate': 0.5}) # Send 50% of this event

      A Note on uWSGI
      If you’re using
    path: clients/python/advanced#advanced-usage
    section: hosted
    title: Advanced Usage
  - excerpt: |-
      in the extra kwarg in each log like this
      some_logger.warning('<strong class="match term0">foo</strong>', extra={'sample_rate': 0.5}) # Send 50% of this event
    path: clients/python/advanced#sampling-messages
    section: hosted
    title: Sampling Messages
  - excerpt: |-
      context:
      # bind the logged in user
      Raven.user_context email: '<strong class="match term0">foo</strong>@example.com'

      # tag the request with something interesting
      Raven.tags_context
    path: clients/ruby#additional-context
    section: hosted
    title: Additional Context
  - excerpt: |-
      bind the logged in user
      $client-&gt;user_context(array('email' =&gt; '<strong class="match term0">foo</strong>@example.com'));

      // tag the request with something interesting
      $client-&gt;tags_context
    path: clients/php/config#configuration
    section: hosted
    title: Configuration
  - excerpt: |-
      bind the logged in user
      $client-&gt;user_context(array('email' =&gt; '<strong class="match term0">foo</strong>@example.com'));

      // tag the request with something interesting
      $client-&gt;tags_context
    path: clients/php/config#providing-request-context
    section: hosted
    title: Providing Request Context
  - excerpt: |-
      future events with setExtraContext:
      Raven.setExtraContext({ <strong class="match term0">foo</strong>: "bar" })

      Data given in setExtraContext is merged with the existing extra
    path: clients/javascript/usage#passing-additional-data
    section: hosted
    title: Passing Additional Data
  - excerpt: |-
      my %s message', array('log'), array(
      'extra' =&gt; array(
      '<strong class="match term0">foo</strong>' =&gt; 'bar
    path: clients/php/usage#reporting-other-errors
    section: hosted
    title: Reporting Other Errors
  - excerpt: |-
      the logged in user
      Sentry.Context.set_user_context(%{email: "<strong class="match term0">foo</strong>@example.com"})

      # sets the tag of interesting
      Sentry.Context.set_tags_context
    path: clients/elixir#adding-context
    section: hosted
    title: Adding Context
  - excerpt: |-
      to Sentry.
      Example:
      capture('raven.events.Message', message='<strong class="match term0">foo</strong>', data={
      'request': {
      'url': '...',
      'data': {},
      'query_string': '...',
      'method': 'POST',
      },
      'logger': 'logger.name
    path: clients/python/api#api-reference
    section: hosted
    title: Api Reference
  - excerpt: |-
      to the sanitizer:
      config.sanitize_fields = ["my_field", "<strong class="match term0">foo</strong>(.*)?bar]

      It’s also possible to remove HTTP header values which match a list <span class="elipsis">…</span> tags
      Default tags to send with each event.
      config.tags = { <strong class="match term0">foo</strong>: :bar }

      transport_failure_callback
      If the transport fails to send an event
    path: clients/ruby/config#configuration
    section: hosted
    title: Configuration
  - excerpt: |-
      to the sanitizer:
      config.sanitize_fields = ["my_field", "<strong class="match term0">foo</strong>(.*)?bar]

      It’s also possible to remove HTTP header values which match a list <span class="elipsis">…</span> tags
      Default tags to send with each event.
      config.tags = { <strong class="match term0">foo</strong>: :bar }

      transport_failure_callback
      If the transport fails to send an event
    path: clients/ruby/config#optional-settings
    section: hosted
    title: Optional Settings
  - excerpt: |-
      when are you using one of the logging integrations.
      mdctags=<strong class="match term0">foo</strong>,bar

      import org.slf4j.MDC;

      MDC.put("<strong class="match term0">foo</strong>", "value1");
      MDC.put("bar", "value2");

      // This sends an event where the '<strong class="match term0">foo</strong>' and 'bar' MDC values are set as additional tags
      logger.error("This is a test
    path: clients/java/config#configuration
    section: hosted
    title: Configuration
  - excerpt: |-
      when are you using one of the logging integrations.
      mdctags=<strong class="match term0">foo</strong>,bar

      import org.slf4j.MDC;

      MDC.put("<strong class="match term0">foo</strong>", "value1");
      MDC.put("bar", "value2");

      // This sends an event where the '<strong class="match term0">foo</strong>' and 'bar' MDC values are set as additional tags
      logger.error("This is a test
    path: clients/java/config#options
    section: hosted
    title: Options
  - excerpt: |-
      when are you using one of the logging integrations.
      mdctags=<strong class="match term0">foo</strong>,bar

      import org.slf4j.MDC;

      MDC.put("<strong class="match term0">foo</strong>", "value1");
      MDC.put("bar", "value2");

      // This sends an event where the '<strong class="match term0">foo</strong>' and 'bar' MDC values are set as additional tags
      logger.error("This is a test
    path: clients/java/config#mdc-tags
    section: hosted
    title: Mdc Tags
  - excerpt: |-
      to Sentry.
      import re

      IGNORABLE_404_URLS = (
      re.compile('/<strong class="match term0">foo</strong>
    path: clients/python/integrations/django#logging
    section: hosted
    title: Logging
  - excerpt: |-
      self, request, exception):
      return HttpResponse('<strong class="match term0">foo</strong>')

      To work around this, you can either disable your error handling middleware <span class="elipsis">…</span> sender=self, request=request)
      return HttpResponse('<strong class="match term0">foo</strong>')

      Note that this technique may break unit tests using the Django test client <span class="elipsis">…</span> request=request)
      return HttpResponse('<strong class="match term0">foo</strong>')

      Circus
      If you are running Django with circus and
      chaussette you will
    path: clients/python/integrations/django#caveats
    section: hosted
    title: Caveats
  - excerpt: |-
      self, request, exception):
      return HttpResponse('<strong class="match term0">foo</strong>')

      To work around this, you can either disable your error handling middleware <span class="elipsis">…</span> sender=self, request=request)
      return HttpResponse('<strong class="match term0">foo</strong>')

      Note that this technique may break unit tests using the Django test client <span class="elipsis">…</span> request=request)
      return HttpResponse('<strong class="match term0">foo</strong>
    path: clients/python/integrations/django#error-handling-middleware
    section: hosted
    title: Error Handling Middleware
  - excerpt: |-
      Client.shared?.extra = [
      "my_key": 1,
      "some_other_value": "<strong class="match term0">foo</strong> bar"
      ]

      All of the above (user, tags, and extra) can be set at anytime.
      Call Client.shared
    path: clients/cocoa/advanced#advanced-usage
    section: hosted
    title: Advanced Usage
