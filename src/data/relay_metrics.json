[
  {
    "type": "Counter",
    "name": "connector.closed",
    "description": "Number of upstream connections closed due to connection timeouts.\n\nRelay employs connection keep-alive whenever possible. Connections are kept open for _15_\nseconds of inactivity or _75_ seconds of activity.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "connector.errors",
    "description": "Number of upstream connections that experienced errors.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "connector.opened",
    "description": "Number of upstream connections opened.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "connector.reused",
    "description": "Number of requests that reused an already open upstream connection.\n\nRelay employs connection keep-alive whenever possible. Connections are kept open for _15_\nseconds of inactivity or _75_ seconds of activity.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "connector.timeouts",
    "description": "Number of upstream connections that experienced a timeout.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "connector.wait_queue",
    "description": "The number of upstream requests queued up for a connection in the connection pool.\n\nRelay uses explicit queueing for most requests. This wait queue should almost always be\nempty, and a large number of queued requests indicates a severe bug.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "event.accepted",
    "description": "Number of envelopes accepted in the current time slot.\n\nThis represents requests that have successfully passed rate limits and filters, and have\nbeen sent to the upstream.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "event.processing_time",
    "description": "Time in milliseconds spent in synchronous processing of envelopes.\n\nThis timing covers the end-to-end processing in the CPU pool and comprises:\n\n- `event_processing.deserialize`\n- `event_processing.pii`\n- `event_processing.serialization`\n\nWith Relay in processing mode, this also includes the following timings:\n\n- `event_processing.process`\n- `event_processing.filtering`\n- `event_processing.rate_limiting`",
    "features": []
  },
  {
    "type": "Counter",
    "name": "event.protocol",
    "description": "Number of events that hit any of the store-like endpoints: Envelope, Store, Security,\nMinidump, Unreal.\n\nThe events are counted before they are rate limited, filtered, or processed in any way.\n\nThis metric is tagged with:\n- `version`: The event protocol version number defaulting to `7`.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "event.queue_size",
    "description": "The number of envelopes in the queue.\n\nThe queue holds all envelopes that are being processed at a particular time in Relay:\n\n- When Relay receives a Request, it ensures the submitted data is wrapped in a single\nenvelope.\n- The envelope receives some preliminary processing to determine if it can be processed or\nif it must be rejected.\n- Once this determination has been made, the HTTP request that created the envelope\nterminates and, if the request is to be further processed, the envelope enters a queue.\n- After the envelope finishes processing and is sent upstream, the envelope is considered\nhandled and it leaves the queue.\n\nThe queue size can be configured with `cache.event_buffer_size`.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "event.queue_size.pct",
    "description": "The number of envelopes in the queue as a percentage of the maximum number of envelopes that\ncan be stored in the queue.\n\nThe value ranges from `0` when the queue is empty to `1` when the queue is full and no\nadditional events can be added. The queue size can be configured using `event.queue_size`.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "event.rejected",
    "description": "Number of envelopes rejected in the current time slot.\n\nThis includes envelopes being rejected because they are malformed or any other errors during\nprocessing (including filtered events, invalid payloads, and rate limits).\n\nTo check the rejection reason, check `events.outcomes`, instead.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "event.size_bytes.raw",
    "description": "The size of the HTTP request body as seen by Relay after it is extracted from a request in\nbytes.\n\n- For envelope requests, this is the full size of the envelope.\n- For JSON store requests, this is the size of the JSON body.\n- For multipart uploads of crash reports and attachments, this is the size of the multipart\nbody including boundaries.\n\nIf this request contains a base64 zlib compressed payload without a proper\n`content-encoding` header, then this is the size before decompression.\n\nThe maximum request body size can be configured with `limits.max_envelope_size`.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "event.size_bytes.uncompressed",
    "description": "The size of the request body as seen by Relay after decompression and decoding in bytes.\n\nJSON store requests may contain a base64 zlib compressed payload without proper\n`content-encoding` header. In this case, this metric contains the size after decoding.\nOtherwise, it is always equal to `event.size_bytes.raw`.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "event.total_time",
    "description": "Total time in milliseconds an envelope spends in Relay from the time it is received until it\nfinishes processing and has been submitted to the upstream.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "event.wait_time",
    "description": "Time spent between receiving a request in Relay (that is, beginning of request handling) and\nthe start of synchronous processing in the EventProcessor. This metric primarily indicates\nbacklog in event processing.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "event_processing.deserialize",
    "description": "Time in milliseconds spent deserializing an event from JSON bytes into the native data\nstructure on which Relay operates.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "event_processing.filtering",
    "description": "Time in milliseconds spent running inbound data filters on an event.",
    "features": [
      "processing"
    ]
  },
  {
    "type": "Timer",
    "name": "event_processing.pii",
    "description": "Time in milliseconds spent in data scrubbing for the current event. Data scrubbing happens\nlast before serializing the event back to JSON.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "event_processing.process",
    "description": "Time in milliseconds spent running event processors on an event for normalization. Event\nprocessing happens before filtering.",
    "features": [
      "processing"
    ]
  },
  {
    "type": "Timer",
    "name": "event_processing.rate_limiting",
    "description": "Time in milliseconds spent checking for organization, project, and DSN rate limits.\n\nNot all events reach this point. After an event is rate limited for the first time, the rate\nlimit is cached. Events coming in after this will be discarded earlier in the request queue\nand do not reach the processing queue.",
    "features": [
      "processing"
    ]
  },
  {
    "type": "Timer",
    "name": "event_processing.serialization",
    "description": "Time spent converting the event from its in-memory reprsentation into a JSON string.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "events.outcomes",
    "description": "Number of outcomes and reasons for rejected Envelopes.\n\nThis metric is tagged with:\n- `outcome`: The basic cause for rejecting the event.\n- `reason`: A more detailed identifier describing the rule or mechanism leading to the\noutcome.\n- `to`: Describes the destination of the outcome. Can be either 'kafka' (when in\nprocessing mode) or 'http' (when outcomes are enabled in an external relay).\n\nPossible outcomes are:\n- `filtered`: Dropped by inbound data filters. The reason specifies the filter that\nmatched.\n- `rate_limited`: Dropped by organization, project, or DSN rate limit, as well as exceeding\nthe Sentry plan quota. The reason contains the rate limit or quota that was exceeded.\n- `invalid`: Data was considered invalid and could not be recovered. The reason indicates\nthe validation that failed.",
    "features": [
      "processing"
    ]
  },
  {
    "type": "Histogram",
    "name": "http_queue.size",
    "description": "The number of upstream requests queued up for sending.\n\nRelay employs connection keep-alive whenever possible. Connections are kept open for _15_\nseconds of inactivity or _75_ seconds of activity. If all connections are busy, they are\nqueued, which is reflected in this metric.\n\nThis metric is tagged with:\n- `priority`: The queueing priority of the request, either `\"high\"` or `\"low\"`. The\npriority determines precedence in executing requests.\n\nThe number of concurrent connections can be configured with:\n- `limits.max_concurrent_requests` for the overall number of connections\n- `limits.max_concurrent_queries` for the number of concurrent high-priority requests",
    "features": []
  },
  {
    "type": "Counter",
    "name": "processing.event.produced",
    "description": "Number of messages placed on the Kafka queues.\n\nWhen Relay operates as Sentry service and an Envelope item is successfully processed, each\nEnvelope item results in a dedicated message on one of the ingestion topics on Kafka.\n\nThis metric is tagged with:\n- `event_type`: The kind of message produced to Kafka.\n\nThe message types can be:\n\n- `event`: An error or transaction event. Error events are sent to `ingest-events`,\ntransactions to `ingest-transactions`, and errors with attachments are sent to\n`ingest-attachments`.\n- `attachment`: An attachment file associated with an error event, sent to\n`ingest-attachments`.\n- `user_report`: A message from the user feedback dialog, sent to `ingest-events`.\n- `session`: A release health session update, sent to `ingest-sessions`.",
    "features": [
      "processing"
    ]
  },
  {
    "type": "Counter",
    "name": "processing.produce.error",
    "description": "Number of producer errors occurred after an envelope was already enqueued for sending to\nKafka.\n\nThese errors include, for example, _\"MessageTooLarge\"_ errors when the broker does not\naccept the requests over a certain size, which is usually due to invalid or inconsistent\nbroker/producer configurations.",
    "features": [
      "processing"
    ]
  },
  {
    "type": "Counter",
    "name": "project_cache.eviction",
    "description": "Number of evicted stale projects from the cache.\n\nRelay scans the in-memory project cache for stale entries in a regular interval configured\nby `cache.eviction_interval`.\n\nThe cache duration for project states can be configured with the following options:\n\n- `cache.project_expiry`: The time after which a project state counts as expired. It is\nautomatically refreshed if a request references the project after it has expired.\n- `cache.project_grace_period`: The time after expiry at which the project state will still\nbe used to ingest events. Once the grace period expires, the cache is evicted and new\nrequests wait for an update.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "project_cache.hit",
    "description": "Number of times a project is looked up from the cache.\n\nThe cache may contain and outdated or expired project state. In that case, the project state\nis updated even after a cache hit.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "project_cache.miss",
    "description": "Number of times a project lookup failed.\n\nA cache entry is created immediately and the project state requested from the upstream.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "project_cache.size",
    "description": "Number of project states currently held in the in-memory project cache.\n\nThe cache duration for project states can be configured with the following options:\n\n- `cache.project_expiry`: The time after which a project state counts as expired. It is\nautomatically refreshed if a request references the project after it has expired.\n- `cache.project_grace_period`: The time after expiry at which the project state will still\nbe used to ingest events. Once the grace period expires, the cache is evicted and new\nrequests wait for an update.\n\nThere is no limit to the number of cached projects.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "project_state.eviction.duration",
    "description": "Total time in milliseconds spent evicting outdated and unused projects happens.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "project_state.get",
    "description": "Number of times a project state is looked up from the cache.\n\nThis includes lookups for both cached and new projects. As part of this, updates for\noutdated or expired project caches are triggered.\n\nRelated metrics:\n- `project_cache.hit`: For successful cache lookups, even for outdated projects.\n- `project_cache.miss`: For failed lookups resulting in an update.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "project_state.pending",
    "description": "Number of projects in the in-memory project cache that are waiting for their state to be\nupdated.\n\nSee `project_cache.size` for more description of the project cache.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "project_state.received",
    "description": "Number of project states **returned** from the upstream for each batch request.\n\nIf multiple batches are updated concurrently, this metric is reported multiple times.\n\nSee `project_cache.size` for more description of the project cache.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "project_state.request",
    "description": "Number of project state HTTP requests.\n\nRelay updates projects in batches. Every update cycle, Relay requests\n`limits.max_concurrent_queries` batches of `cache.batch_size` projects from the upstream.\nThe duration of these requests is reported via `project_state.request.duration`.\n\nNote that after an update loop has completed, there may be more projects pending updates.\nThis is indicated by `project_state.pending`.",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "project_state.request.batch_size",
    "description": "Number of project states **requested** from the upstream for each batch request.\n\nIf multiple batches are updated concurrently, this metric is reported multiple times.\n\nThe batch size can be configured with `cache.batch_size`. See `project_cache.size` for more\ndescription of the project cache.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "project_state.request.duration",
    "description": "Total time in milliseconds spent fetching queued project configuration updates requests to\nresolve.\n\nRelay updates projects in batches. Every update cycle, Relay requests\n`limits.max_concurrent_queries * cache.batch_size` projects from the upstream. This metric\nmeasures the wall clock time for all concurrent requests in this loop.\n\nNote that after an update loop has completed, there may be more projects pending updates.\nThis is indicated by `project_state.pending`.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "requests",
    "description": "Number of HTTP requests reaching Relay.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "requests.duration",
    "description": "Total duration in milliseconds for handling inbound web requests until the HTTP response is\nreturned to the client.\n\nThis does **not** correspond to the full event ingestion time. Requests for events that are\nnot immediately rejected due to bad data or cached rate limits always return `200 OK`. Full\nvalidation and normalization occur asynchronously, which is reported by\n`event.processing_time`.\n\nThis metric is tagged with:\n- `method`: The HTTP method of the request.\n- `route`: Unique dashed identifier of the endpoint.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "responses.status_codes",
    "description": "Number of completed HTTP requests.\n\nThis metric is tagged with:\n\n- `status_code`: The HTTP status code number.\n- `method`: The HTTP method used in the request in uppercase.\n- `route`: Unique dashed identifier of the endpoint.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "scrubbing.attachments.duration",
    "description": "Time spend on attachment scrubbing.\n\nThis represents the total time spent on evaluating the scrubbing rules for an\nattachment and the attachment scrubbing itself, regardless of whether any rules were\napplied.  Note that minidumps which failed to be parsed (status=\"error\" in\nscrubbing.minidumps.duration) will be scrubbed as plain attachments and count\ntowards this.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "scrubbing.minidumps.duration",
    "description": "Time spent on minidump scrubbing.\n\nThis is the total time spent on parsing and scrubbing the minidump.  Even if no PII\nscrubbing rules applied the minidump will still be parsed and the rules evaluated on\nthe parsed minidump, this duration is reported here with status of \"n/a\".\n\nThis metric is tagged with:\n\n- `status`: Scrubbing status: \"ok\" means successful scrubbed, \"error\" means there\nwas an error during scrubbing and finally \"n/a\" means scrubbing was successful\nbut no scurbbing rules applied.",
    "features": []
  },
  {
    "type": "Counter",
    "name": "server.starting",
    "description": "Number of Relay server starts.\n\nThis can be used to track unwanted restarts due to crashes or termination.",
    "features": []
  },
  {
    "type": "Set",
    "name": "unique_projects",
    "description": "Represents the number of active projects in the current slice of time",
    "features": []
  },
  {
    "type": "Gauge",
    "name": "upstream.network_outage",
    "description": "The state of Relay with respect to the upstream connection.\nPossible values are `0` for normal operations and `1` for a network outage.",
    "features": []
  },
  {
    "type": "Timer",
    "name": "upstream.requests.duration",
    "description": "Total time spent to send request to upstream Relay and handle the response.\n\nThis metric is tagged with:\n\n- `result`: What happened to the request, an enumeration with the following values:\n* `success`: The request was sent and returned a success code `HTTP 2xx`\n* `response_error`: The request was sent and it returned an HTTP error.\n* `payload_failed`: The request was sent but there was an error in interpreting the response.\n* `send_failed`: Failed to send the request due to a network error.\n* `rate_limited`: The request was rate limited.\n* `invalid_json`: The response could not be parsed back into JSON.\n- `route`: The endpoint that was called on the upstream.\n- `status-code`: The status code of the request when available, otherwise \"-\".\n- `retries`: Number of retries bucket 0, 1, 2, few (3 - 10), many (more than 10).",
    "features": []
  },
  {
    "type": "Histogram",
    "name": "upstream.retries",
    "description": "Counts the number of retries for each upstream http request.\n\nThis metric is tagged with:\n\n- `result`: What happened to the request, an enumeration with the following values:\n* `success`: The request was sent and returned a success code `HTTP 2xx`\n* `response_error`: The request was sent and it returned an HTTP error.\n* `payload_failed`: The request was sent but there was an error in interpreting the response.\n* `send_failed`: Failed to send the request due to a network error.\n* `rate_limited`: The request was rate limited.\n* `invalid_json`: The response could not be parsed back into JSON.\n- `route`: The endpoint that was called on the upstream.\n- `status-code`: The status code of the request when available, otherwise \"-\".",
    "features": []
  }
]