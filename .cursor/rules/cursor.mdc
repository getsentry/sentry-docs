# Cursor Rules for Sentry Documentation

Welcome to the Sentry documentation project. This guide provides quick access to all development standards and patterns for creating language-agnostic, maintainable documentation.

## ðŸ“‹ Quick Reference

### File Structure Overview
- **[SCOPE-MATRIX.md](./SCOPE-MATRIX.md)** - What content goes where (start here)
- **[architecture.mdc](./architecture.mdc)** - Language-agnostic system design
- **[coding-guidelines.mdc](./coding-guidelines.mdc)** - Code quality standards  
- **[common-patterns.mdc](./common-patterns.mdc)** - Reusable utilities and components
- **[feature-development.mdc](./feature-development.mdc)** - PRFAQ â†’ PRD â†’ Implementation workflow
- **[contribution-guidelines.mdc](./contribution-guidelines.mdc)** - Git workflow and review process

### Documentation Strategy
- **[llms/documentation-style-guide.mdc](./llms/documentation-style-guide.mdc)** - Content writing standards
- **[llms/document-scopes.mdc](./llms/document-scopes.mdc)** - Documentation organization
- **[llms/content-strategy.mdc](./llms/content-strategy.mdc)** - Efficient content structuring

### Platform Implementation
- **[PLATFORM-CRON-DOCS-CHECKLIST.md](./PLATFORM-CRON-DOCS-CHECKLIST.md)** - Cross-platform documentation improvements

## ðŸŽ¯ Content Guidelines (Language Agnostic)

### Universal Documentation Principles
- **Essential-first structure** - Important information upfront
- **Progressive disclosure** - Basic â†’ advanced content organization
- **Platform-specific examples** - Same concept, different implementations
- **Working code samples** - Tested, copy-pasteable examples

### Cross-Platform Content Strategy
- **Shared concepts** - Universal principles documented once
- **Platform implementations** - Language-specific syntax and patterns
- **Framework adaptations** - Platform + framework combinations
- **Consistent terminology** - Same vocabulary across all platforms

## ðŸ”— Key Documentation Components

### Multi-Platform Content Sharing
- **`<PlatformContent>`** - Include platform-specific shared content
- **`<Include>`** - Include general shared content  
- **Platform inheritance** - Guides inherit from platform common content
- **Content resolution** - Guide-specific â†’ Platform-specific â†’ Default fallback

### Navigation Architecture
- **Auto-generated sidebar** - Built from frontmatter and file structure
- **Hierarchical organization** - Platform â†’ feature â†’ implementation method
- **Context-aware display** - Show content relevant to current platform
- **Cross-platform search** - Full-text search with platform filtering

## ðŸ“Š Content Quality Standards

### Universal Requirements
- [ ] Clear, descriptive titles (language-agnostic)
- [ ] Proper frontmatter with platform targeting
- [ ] Working code examples (platform-specific)
- [ ] Essential-first content structure
- [ ] Links to related documentation
- [ ] Progressive disclosure pattern

### Platform-Specific Standards
- [ ] Correct syntax for target platform
- [ ] Appropriate package managers and tools
- [ ] Platform conventions and best practices
- [ ] Framework-specific integration guidance
- [ ] Platform-appropriate error handling

### Before Committing
- [ ] Content follows [content strategy](./llms/content-strategy.mdc)
- [ ] No broken internal links
- [ ] All code examples tested on target platform
- [ ] Frontmatter correctly targets platforms
- [ ] Progressive disclosure implemented

## ðŸš€ Getting Started (Any Platform)

1. **Understand the scope** - Read [SCOPE-MATRIX.md](./SCOPE-MATRIX.md)
2. **Check architecture** - Review [architecture.mdc](./architecture.mdc) for system design
3. **Follow coding standards** - Use [coding-guidelines.mdc](./coding-guidelines.mdc) 
4. **Use common patterns** - Reference [common-patterns.mdc](./common-patterns.mdc)
5. **Follow the workflow** - Use [feature-development.mdc](./feature-development.mdc)
6. **Apply proven improvements** - Use [PLATFORM-CRON-DOCS-CHECKLIST.md](./PLATFORM-CRON-DOCS-CHECKLIST.md)

## ðŸ”§ Common Tasks (Platform Agnostic)

### Adding New Platform Documentation
1. Determine content location using [SCOPE-MATRIX.md](./SCOPE-MATRIX.md)
2. Follow content guidelines from [documentation-style-guide.mdc](./llms/documentation-style-guide.mdc)
3. Apply [content strategy](./llms/content-strategy.mdc) for structure
4. Use platform-specific examples and syntax
5. Test all code examples on target platform
6. Follow [platform checklist](./PLATFORM-CRON-DOCS-CHECKLIST.md) for feature documentation

### Cross-Platform Content Updates
1. Identify shared concepts vs platform-specific implementations
2. Update shared content in appropriate includes/
3. Verify platform-specific examples still work
4. Ensure consistent terminology across platforms
5. Test navigation and cross-references

### Applying Documentation Improvements
1. Review current content against [quality standards](#content-quality-standards)
2. Apply essential-first structure and progressive disclosure
3. Reduce verbosity while maintaining clarity
4. Update platform-specific examples
5. Convert troubleshooting to FAQ format
6. Follow proven patterns from successful implementations

## ðŸŽ¯ Platform Strategy

### Supported Platforms
Based on [Sentry Crons Getting Started](https://docs.sentry.io/product/crons/getting-started/):

**SDK Platforms:**
- JavaScript/Node.js (Next.js, SvelteKit, Remix, NestJS)
- Python (Celery)
- PHP (Laravel)
- Java (Spring Boot)
- Go
- Ruby
- Elixir

**Universal Methods:**
- HTTP
- Sentry CLI

### Implementation Approach
1. **Language-agnostic concepts** - Universal principles and patterns
2. **Platform-specific syntax** - Correct implementation for each platform
3. **Framework adaptations** - Platform + framework combinations
4. **Progressive enhancement** - Basic â†’ advanced â†’ framework-specific

### Content Consistency
- **Same structure** - Consistent organization across platforms
- **Same concepts** - Universal terminology and explanations
- **Different implementations** - Platform-appropriate syntax and patterns
- **Shared troubleshooting** - Common issues with platform-specific solutions

## ðŸ’¡ Proven Success Patterns

### From JavaScript Platform Implementation
- **60% content length reduction** - Focus on essential information
- **Eliminated duplicate content** - Single source of truth approach
- **Essential-first structure** - Important information upfront
- **Progressive disclosure** - Advanced topics linked, not inline
- **FAQ-style troubleshooting** - Problem â†’ solution format

### Applied Across All Platforms
- **Consistent method categorization** - UI Setup â†’ Automatic â†’ Manual Methods
- **Working code examples** - Tested, copy-pasteable implementations
- **Clear user guidance** - Help users choose appropriate approach
- **Streamlined maintenance** - Reduced overhead for content updates

## ðŸ”„ Continuous Improvement

### Content Monitoring
- Track user feedback on documentation clarity
- Monitor support ticket reduction for "how to" questions
- Measure adoption of different implementation methods
- Iterate based on platform-specific user needs

### Cross-Platform Quality
- Regular review of content consistency
- Validation of code examples across platforms
- Link health monitoring
- Platform parity assessment

For detailed implementation guidance, see our [proven platform checklist](./PLATFORM-CRON-DOCS-CHECKLIST.md) and established [content strategy](./llms/content-strategy.mdc).
