# Content Strategy for .cursor/rules/

Guidelines for organizing and structuring documentation content efficiently.

## Content Hierarchy Principle

### Essential-First Structure
Each file should follow this pattern:
1. **What** (brief description) 
2. **When** (use case bullet points)
3. **How** (minimal working example)
4. **Link** (to advanced patterns if needed)

### Example Structure
```markdown
# Component Name

Brief description of what this component does.

Use when you need:
- Specific use case A
- Specific use case B
- Specific use case C

```typescript
// Simple working example
export function Example() {
  return <div>Basic usage</div>;
}
```

For advanced patterns, see [Advanced Examples](./advanced-examples.mdc).
```

## Content Organization Rules

### Avoid Duplication
- **Link instead of duplicate** - Reference other files rather than copying content
- **Single source of truth** - Each concept should live in exactly one place
- **Specific references** - Use line numbers when referencing code patterns

### File Purpose Clarity
- **One clear purpose per file** - Avoid mixing unrelated concepts
- **Descriptive names** - File names should indicate exact content
- **Scope boundaries** - Respect the definitions in [SCOPE-MATRIX.md](../SCOPE-MATRIX.md)

## Context Window Optimization

### Front-Load Important Information
```markdown
# ✅ GOOD - Important info first
## Authentication Patterns

Use JWT tokens for API authentication:

```typescript
const token = jwt.sign({userId: user.id}, SECRET);
```

## Advanced Configuration
[Details about edge cases...]

# ❌ BAD - Important info buried
## Authentication Patterns

### Background
Authentication is a fundamental aspect of web security...
[200 lines of background information]

### Basic Usage
Use JWT tokens...
```

### Progressive Disclosure
- **Essential patterns first** - Cover 80% use cases immediately
- **Advanced patterns linked** - Don't overwhelm with edge cases
- **Working examples prioritized** - Code over explanations

## Quality Standards

### Each File Should:
- [ ] Serve a single, clear purpose
- [ ] Have no significant overlap with other files
- [ ] Link to related content instead of duplicating
- [ ] Be actionable and specific to this project
- [ ] Include working examples where relevant
- [ ] Be scannable with clear headings

### Avoid:
- [ ] Generic programming advice not specific to this project
- [ ] Repeated documentation structure examples
- [ ] Copy-pasted content from other files
- [ ] Overwhelming walls of text
- [ ] Multiple examples for the same concept

## Content Maintenance

### When to Update
- Code patterns change significantly
- New domain features added
- External dependencies updated
- Cross-references become outdated
- User feedback indicates confusion

### Update Process
1. **Check scope** - Ensure changes belong in this file
2. **Verify links** - Update all cross-references
3. **Test examples** - Ensure all code still works
4. **Review clarity** - Remove unnecessary complexity

## Writing Guidelines

### Tone and Style
- **Direct and actionable** - Tell readers what to do
- **Assume competence** - Don't over-explain basic concepts
- **Be specific** - "Use X for Y" not "X is useful"
- **Show, don't tell** - Prioritize code examples

### Structure Guidelines
- **Consistent headings** - Use similar patterns across files
- **Bullet points** - Break up long paragraphs
- **Code blocks** - Include copy-able examples
- **Cross-references** - Link to related concepts

## Review Checklist

### Before Updating Any File
- [ ] Does this content belong in this file per [SCOPE-MATRIX.md](../SCOPE-MATRIX.md)?
- [ ] Am I duplicating content that exists elsewhere?
- [ ] Are my code examples tested and working?
- [ ] Do my cross-references point to correct locations?
- [ ] Is this information immediately actionable?
- [ ] Have I front-loaded the most important information?

### Content Quality Check
- [ ] File serves single, clear purpose
- [ ] No significant overlap with other files
- [ ] Links work and are specific
- [ ] Content is project-specific and actionable
- [ ] Examples are current and functional

This strategy ensures documentation remains focused, maintainable, and useful for both AI context and human readers.
description:
globs:
alwaysApply: false
---
