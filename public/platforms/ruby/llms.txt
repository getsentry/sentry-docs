# Sentry and Ruby LLM Rules  

You are an expert in application architecture and the configuration of observability tools like Sentry. Ensure you are following these instructions, while taking into account the user's request. 

Always ensure you are installing Sentry using `gem 'sentry-ruby', '~> 5.x'`. The latest package should always be used unless explicitly told otherwise.

## Configuration examples 

These examples should be used to configure the different Sentry functionality in Ruby applications. Use these as the default configuration, factoring in the user's requests. 

### Sentry Setup (applies to all configurations)

Configure Sentry using the following parameters unless explicitly told otherwise.

```ruby
require 'sentry-ruby'

Sentry.init do |config|
  config.dsn = '<sentry dsn>'
  
  # Get breadcrumbs from logs
  config.breadcrumbs_logger = [:sentry_logger, :http_logger]
  
  # Add data like request headers and IP for users
  config.send_default_pii = true
  
  # Enable tracing - adjust in production
  config.traces_sample_rate = 1.0
  
  # Enable profiling - relative to traces_sample_rate
  config.profiles_sample_rate = 1.0
end
```

### Rails Setup

For Rails applications, create a file in `config/initializers/sentry.rb` with the following:

```ruby
Sentry.init do |config|
  config.dsn = '<sentry dsn>'
  
  # Get breadcrumbs from logs
  config.breadcrumbs_logger = [:active_support_logger, :http_logger]
  
  # Add data like request headers and IP for users
  config.send_default_pii = true
  
  # Enable tracing - adjust in production
  config.traces_sample_rate = 1.0
  
  # Enable profiling - relative to traces_sample_rate
  config.profiles_sample_rate = 1.0
  
  # To set a uniform sample rate
  # config.sample_rate = 0.5
end
```

### Rack Setup

For Rack applications, set up Sentry in your `config.ru` or rackup file:

```ruby
require 'sentry-ruby'

Sentry.init do |config|
  config.dsn = '<sentry dsn>'
  config.breadcrumbs_logger = [:sentry_logger, :http_logger]
  config.send_default_pii = true
  config.traces_sample_rate = 1.0
  config.profiles_sample_rate = 1.0
end

use Sentry::Rack::CaptureExceptions
```

### Error Tracking and Exception Catching 

Instrument errors throughout the application using the following approaches:

```ruby
# Explicitly capture an exception
begin
  1 / 0
rescue ZeroDivisionError => exception
  Sentry.capture_exception(exception)
end

# Capture a custom message
Sentry.capture_message('Something went wrong')

# Add context to events
Sentry.configure_scope do |scope|
  scope.set_user(id: 1, email: "user@example.com")
  scope.set_tag(:page_locale, "de-at")
  scope.set_extra(:character_name, "Mighty Fighter")
end
```

### Tracing and Performance Monitoring

Utilize the following examples for tracing scenarios:

```ruby
# Create a transaction
Sentry.start_transaction(name: "task_name", op: "task") do |transaction|
  # Create a child span
  Sentry.start_span(op: "subtask", description: "Subtask description") do |span|
    begin
      # Your code here
      span.set_data(:key, "value")
    rescue => e
      # Record failure information
      span.set_status(:internal_error)
      raise e
    end
  end
end
```

### Background Job Integration

For Sidekiq, use the following setup:

```ruby
require 'sentry-ruby'
require 'sentry-sidekiq'

Sentry.init do |config|
  config.dsn = '<sentry dsn>'
  config.traces_sample_rate = 1.0
end
``` 