{"key":"node.connect","type":"framework","doc_link":"https://docs.sentry.io/platforms/node/guides/connect/","name":"Connect","aliases":[],"categories":["browser"],"body":"<p>Add <code>@sentry/node</code> as a dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash highlight\"><code class=\"language-bash\"><span class=\"token comment\"># Using yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @sentry/node\n\n<span class=\"token comment\"># Using npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> @sentry/node</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript highlight\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> connect <span class=\"token keyword\">from</span> <span class=\"token string\">\"connect\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Sentry <span class=\"token keyword\">from</span> <span class=\"token string\">\"@sentry/node\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or using CommonJS</span>\n<span class=\"token comment\">// const connect = require('connect');</span>\n<span class=\"token comment\">// const Sentry = require('@sentry/node');</span>\n\n<span class=\"token comment\">// Must configure Sentry before doing anything else with it</span>\nSentry<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dsn</span><span class=\"token operator\">:</span> <span class=\"token string\">\"___PUBLIC_DSN___\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mainHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My first Sentry error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The error id is attached to `res.sentry` to be returned</span>\n  <span class=\"token comment\">// and optionally displayed to the user for support.</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>sentry <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// The request handler be the first item</span>\n  Sentry<span class=\"token punctuation\">.</span>Handlers<span class=\"token punctuation\">.</span><span class=\"token function\">requestHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  connect<span class=\"token punctuation\">.</span><span class=\"token function\">bodyParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  connect<span class=\"token punctuation\">.</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  mainHandler<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// The error handler must be before any other error middleware</span>\n  Sentry<span class=\"token punctuation\">.</span>Handlers<span class=\"token punctuation\">.</span><span class=\"token function\">errorHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Optional fallthrough error handler</span>\n  onError\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>requestHandler</code> accepts some options that let you decide what data should be included in the event sent to Sentry.</p>\n<p>Possible options are:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript highlight\"><code class=\"language-javascript\"><span class=\"token comment\">// keys to be extracted from req</span>\nrequest<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">|</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default: true = ['cookies', 'data', 'headers', 'method', 'query_string', 'url']</span>\n<span class=\"token comment\">// server name</span>\nserverName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span> <span class=\"token comment\">// default: true</span>\n<span class=\"token comment\">// generate transaction name</span>\n<span class=\"token comment\">//   path == request.path (eg. \"/foo\")</span>\n<span class=\"token comment\">//   methodPath == request.method + request.path (eg. \"GET|/foo\")</span>\n<span class=\"token comment\">//   handler == function name (eg. \"fooHandler\")</span>\ntransaction<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">|</span> <span class=\"token string\">'path'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'methodPath'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'handler'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default: true = 'methodPath'</span>\n<span class=\"token comment\">// keys to be extracted from req.user</span>\nuser<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">|</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default: true = ['id', 'username', 'email']</span>\n<span class=\"token comment\">// client ip address</span>\nip<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span> <span class=\"token comment\">// default: false</span>\n<span class=\"token comment\">// node version</span>\nversion<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span> <span class=\"token comment\">// default: true</span>\n<span class=\"token comment\">// timeout for fatal route errors to be delivered</span>\nflushTimeout<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// default: 2000</span></code></pre></div>\n<p>For example, if you want to skip the server name and add just user, you would use <code>requestHandler</code> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript highlight\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  Sentry<span class=\"token punctuation\">.</span>Handlers<span class=\"token punctuation\">.</span><span class=\"token function\">requestHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">serverName</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By default, <code>errorHandler</code> will capture only errors with a status code of <code>500</code> or higher. If you want to change it, provide it with the <code>shouldHandleError</code> callback, which accepts middleware errors as its argument and decides, whether an error should be sent or not, by returning an appropriate boolean value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript highlight\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  Sentry<span class=\"token punctuation\">.</span>Handlers<span class=\"token punctuation\">.</span><span class=\"token function\">errorHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">shouldHandleError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Capture all 404 and 500 errors</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">404</span> <span class=\"token operator\">||</span> error<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}