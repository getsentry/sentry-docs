{"key":"unreal","type":"framework","doc_link":"https://docs.sentry.io/platforms/unreal/","name":"Unreal Engine","aliases":[],"categories":["mobile","desktop","console","gaming"],"body":"<h2 id=\"installation\" style=\"position:relative;\">Installation</h2>\n<p>Download the latest plugin sources from the <a href=\"https://github.com/getsentry/sentry-unreal/releases\">Releases page</a> and place it in the </p><div class=\"term-wrapper\"><span class=\"term\">project</span><span class=\"description\" role=\"tooltip\" aria-label=\"project definition\">Represents your service in Sentry and allows you to scope events to a distinct application.</span></div>'s \"Plugins\" directory or install the plugin from the <a href=\"https://www.unrealengine.com/marketplace/en-US/product/sentry-01\">UE Marketplace</a> page via the Epic Games Launcher.<p></p>\n<blockquote>\n<p>The <a href=\"https://github.com/getsentry/sentry-unreal/releases\">Releases page</a> provides two plugin packages: <code>github</code> and <code>marketplace</code>. We recommend using the <code>github</code> version which uses <code>Crashpad</code>, an out-of-proc handler that sends the crash report right away. The <code>marketplace</code> version relies on <code>Breakpad</code>, an in-proc handler which requires the UE application or game to be relaunched in order to send the crash reports to Sentry.</p>\n</blockquote>\n<p>In the editor navigate to the <strong>Project Settings &gt; Plugins &gt; Code Plugins</strong> menu and check whether the Sentry plugin is enabled.</p>\n<p>To access the plugin API from within C++, add Sentry support to the build script (MyProject.build.cs):</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp highlight\"><code class=\"language-csharp\">PublicDependencyModuleNames<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sentry\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"configuration\" style=\"position:relative;\">Configuration</h2>\n<p>Access the Sentry configuration window by going to editor's menu: <strong>Project Settings &gt; Plugins &gt; Sentry</strong> and enter the following </p><div class=\"term-wrapper\"><span class=\"term\">DSN</span><span class=\"description\" role=\"tooltip\" aria-label=\"DSN definition\">The Data Source Name (DSN) key tells the Sentry SDK where to send events, ensuring they go to the right project.</span></div>:<p></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text highlight\"><code class=\"language-text\">___PUBLIC_DSN___</code></pre></div>\n<h2 id=\"crash-reporter-client\" style=\"position:relative;\">Crash Reporter Client</h2>\n<p>In Unreal Engine versions prior to UE 5.2 to automatically capture errors on desktop platforms <a href=\"https://docs.sentry.io/platforms/unreal/configuration/setup-crashreporter/\">Crash Reporter Client</a> has to be configured.</p>\n<h3 id=\"include-the-unreal-engine-crash-reporter\" style=\"position:relative;\">Include the Unreal Engine Crash Reporter</h3>\n<p>You can add the crash reporter client to your game in <strong>Project Settings</strong>.</p>\n<p>The option is located under <strong>Project &gt; Packaging</strong>; select \"show advanced\" followed by\nchecking the box for \"Include Crash Reporter\".</p>\n<h3 id=\"debug-information\" style=\"position:relative;\">Debug Information</h3>\n<p>To get the most out of Sentry, crash reports must include debug information.\nIn order for Sentry to be able to process the crash report and translate\nmemory addresses to meaningful information like function names, module names,\nand line numbers, the crash itself must include debug information. In addition, symbols need\nto be uploaded to Sentry.</p>\n<p>The option is also located under <strong>Project &gt; Packaging</strong>; select \"show advanced\" followed by\nchecking the box for \"Include Debug Files\".</p>\n<h3 id=\"configure-the-crash-reporter-endpoint\" style=\"position:relative;\">Configure the Crash Reporter Endpoint</h3>\n<p>Now that the crash reporter and debug files are included, UE4 needs to know where to send the\ncrash. For that, add the Sentry \"Unreal Engine Endpoint\" from the \"Client Keys\" settings page to the game's configuration file. This will\ninclude which </p><div class=\"term-wrapper\"><span class=\"term\">project</span><span class=\"description\" role=\"tooltip\" aria-label=\"project definition\">Represents your service in Sentry and allows you to scope events to a distinct application.</span></div> in Sentry you want to see crashes displayed in.\nThat's accomplished by configuring the <code>CrashReportClient</code> in the <em>DefaultEngine.ini</em> file. Changing the engine is necessary for this to work.<p></p>\n<p>Edit the file:</p>\n<blockquote>\n<p>engine-dir\\Engine\\Programs\\CrashReportClient\\Config\\DefaultEngine.ini</p>\n</blockquote>\n<p>Add the configuration section:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini highlight\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">CrashReportClient</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">CrashReportClientVersion</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1.0</span>\n<span class=\"token key attr-name\">DataRouterUrl</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">___UNREAL_URL___</span>\"</span></code></pre></div>\n<p>If a <code>[CrashReportClient]</code> section already exists, simply changing the value of <code>DataRouterUrl</code>\nis enough.</p>\n<h3 id=\"upload-debug-symbols\" style=\"position:relative;\">Upload Debug Symbols</h3>\n<p>To allow Sentry to fully process native crashes and provide you with\nsymbolicated stack traces, you need to upload <em>debug information files</em>\n(sometimes also referred to as <em>debug symbols</em> or just <em>symbols</em>). We recommend\nuploading debug information during your build or release process.</p>\n<p>For all libraries where you'd like to receive symbolication, <strong>you need\nto provide debug information</strong>. This includes dependencies and operating system\nlibraries.</p>\n<p>In addition to debug information files, Sentry needs <em>call frame information</em>\n(CFI) to extract accurate stack traces from minidumps of optimized release\nbuilds. CFI is usually part of the executables and not copied to debug symbols.\nUnless you are uploading Breakpad symbols, be sure to also include the binaries\nwhen uploading files to Sentry.</p>\n<p>For more information on uploading debug information and their supported formats,\ncheck out our <a href=\"https://docs.sentry.io/workflow/debug-files/\">Debug Information Files documentation</a>.</p>\n<h2 id=\"verify\" style=\"position:relative;\">Verify</h2>\n<p>Once everything is configured you can call the plugin API from both C++ and blueprints:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp highlight\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SentrySubsystem.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Capture message</span>\n    USentrySubsystem<span class=\"token operator\">*</span> SentrySubsystem <span class=\"token operator\">=</span> GEngine<span class=\"token operator\">-&gt;</span><span class=\"token generic-function\"><span class=\"token function\">GetEngineSubsystem</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>USentrySubsystem<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    SentrySubsystem<span class=\"token operator\">-&gt;</span><span class=\"token function\">CaptureMessage</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Capture message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}