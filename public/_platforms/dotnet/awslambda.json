{"key":"dotnet.awslambda","type":"framework","doc_link":"https://docs.sentry.io/platforms/dotnet/guides/aws-lambda/","name":"AWS Lambda (.NET)","aliases":[],"categories":[],"body":"<p>Sentry provides an integration with AWS Lambda ASP.NET Core Server through the <a href=\"https://www.nuget.org/packages/Sentry.AspNetCore\">Sentry.AspNetCore NuGet package</a>.</p>\n<h2 id=\"install\" style=\"position:relative;\">Install</h2>\n<p>Add the Sentry dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell highlight\"><code class=\"language-powershell\"><span class=\"token function\">Install-Package</span> Sentry<span class=\"token punctuation\">.</span>AspNetCore <span class=\"token operator\">-</span>Version 3<span class=\"token punctuation\">.</span>41<span class=\"token punctuation\">.</span>4</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell highlight\"><code class=\"language-shell\">dotnet <span class=\"token function\">add</span> package Sentry.AspNetCore <span class=\"token parameter variable\">-v</span> <span class=\"token number\">3.41</span>.4</code></pre></div>\n<p>You can combine this integration with a logging library like <code>log4net</code>, <code>NLog</code>, or <code>Serilog</code> to include both request data as well as your logs as breadcrumbs. The logging ingrations also capture events when an error is logged.</p>\n<h3 id=\"configuring\" style=\"position:relative;\">Configuring</h3>\n<p>All <code>ASP.NET Core</code> configurations are valid here. But one configuration in particular is relevant.</p>\n<p><code>FlushOnCompletedRequest</code> ensures all events are flushed out. This is because the general ASP.NET Core hooks for when the process is exiting are not guaranteed to run in a serverless environment. This setting ensures that no event is lost if AWS recycles the process.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp highlight\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaEntryPoint</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Amazon<span class=\"token punctuation\">.</span>Lambda<span class=\"token punctuation\">.</span>AspNetCoreServer<span class=\"token punctuation\">.</span>APIGatewayProxyFunction</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IWebHostBuilder</span> builder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        builder\n            <span class=\"token comment\">// Add Sentry</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">UseSentry</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{</span>\n              o<span class=\"token punctuation\">.</span>Dsn <span class=\"token operator\">=</span> <span class=\"token string\">\"___PUBLIC_DSN___\"</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// When configuring for the first time, to see what the SDK is doing:</span>\n              o<span class=\"token punctuation\">.</span>Debug <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// Required in Serverless environments</span>\n              o<span class=\"token punctuation\">.</span>FlushOnCompletedRequest <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// Set TracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.</span>\n               <span class=\"token comment\">// We recommend adjusting this value in production.</span>\n              o<span class=\"token punctuation\">.</span>TracesSampleRate <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Startup<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"verification\" style=\"position:relative;\">Verification</h3>\n<p>You can verify your setup by throwing an exception from a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp highlight\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Route</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"api/[controller]\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BadController</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpGet</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And make a request to that lambda:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell highlight\"><code class=\"language-shell\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> GET <span class=\"token parameter variable\">-I</span> https://url.of.server.aws/api/bad</code></pre></div>\n<p>Check out the <a href=\"https://docs.sentry.io/platforms/dotnet/guides/aspnetcore/\">Sentry ASP.NET Core</a> documentation for the complete set of options.</p>"}